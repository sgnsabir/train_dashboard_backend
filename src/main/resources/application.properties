# =========================================
# Application Name & Active Profile
# =========================================
spring.application.name=predictive-maintenance-backend
spring.profiles.active=development
spring.main.web-application-type=reactive

# =========================================
# Server Configuration
# =========================================
server.port=8080
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# Allow bean definition overriding
spring.main.allow-bean-definition-overriding=true

# Exclude non-reactive Redis auto-config
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration

# =========================================
# R2DBC Database Connection (Reactive)
# =========================================
spring.r2dbc.url=r2dbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:banenor_db}
spring.r2dbc.username=${DB_USERNAME:postgres}
spring.r2dbc.password=${DB_PASSWORD:0000}

# Connection Pooling
spring.r2dbc.pool.initial-size=5
spring.r2dbc.pool.max-size=20

# Schema/Data initialization
spring.sql.init.mode=always
spring.r2dbc.initialization-mode=update
spring.r2dbc.schema=classpath:schema.sql
spring.r2dbc.data=classpath:data.sql

# Quiet down SQL logging
logging.level.org.springframework.r2dbc.core=WARN
logging.level.io.r2dbc.postgresql=INFO

# =========================================
# JWT Configuration
# =========================================
jwt.secret=${JWT_SECRET:AZmsBHO2Oz2ZFXctJprovHnw2qHaWpyLmunQjz35U6w=}
jwt.expiration-in-seconds=36000

# =========================================
# Kafka Configuration
# =========================================
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
spring.kafka.consumer.group-id=banenor-sensor-data-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.max-poll-records=50
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
kafka.topic.sensor-data=sensor-data-topic
kafka.topic.dead-letter=sensor-data-dead-letter-topic
# =========================================
# Redis & Caching
# =========================================
spring.cache.type=redis
spring.data.redis.host=${SPRING_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_REDIS_PORT:6379}
spring.cache.redis.cache-names=averages,jwtBlacklist

# =========================================
# CORS Configuration
# =========================================
# for REST endpoints (custom property, if you use it in  CorsFilter)
cors.allowed-origins=http://localhost:3000

# for Spring WebFlux (applies also to WebSocket handshake endpoints)
spring.webflux.cors.allowed-origins=${cors.allowed-origins}
spring.webflux.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
spring.webflux.cors.allowed-headers=*

# =========================================
# SMTP Configuration (Dev Defaults)
# =========================================
# MailHog (plain SMTP, no auth, no TLS)
mail.host=mailhog
mail.port=1025
mail.username=
mail.password=
mail.ssl=false
mail.starttls.required=false
management.health.mail.enabled=false

# envelope-from address for SMTP (must be valid syntax)
mail.from=no-reply@yourdomain.local
# actual alert email recipient
alert.email.to=alert@example.com
alert.check.interval.ms=60000

# =========================================
# Email Verification
# =========================================
# build link under this key:
verification.base-url=http://localhost:8080/api/v1/auth/verify

# =========================================
# Alerting
# =========================================
# default ?from? or fallback address in alerts
alert.default-email=alerts@example.com

# =========================================
# Miscellaneous
# =========================================
spring.cloud.compatibility-verifier.enabled=false

# TLS / SSL are configured in MailConfig.java (StartTLS on 587)

# =========================================
# Maintenance Thresholds
# =========================================
maintenance.speed-threshold=85.0
maintenance.aoa-threshold=5.0
maintenance.vibration-threshold=3.0
maintenance.vertical-force-threshold=500.0
maintenance.lateral-force-threshold=300.0
maintenance.lateral-vibration-threshold=2.0
maintenance.axle-load-threshold=1000.0
maintenance.realtime-speed-threshold=80.0
maintenance.realtime-vibration-left-threshold=5.0
maintenance.realtime-vibration-right-threshold=5.0
maintenance.realtime-vertical-force-left-threshold=550.0
maintenance.realtime-vertical-force-right-threshold=550.0
maintenance.realtime-lateral-force-right-threshold=350.0
maintenance.realtime-lateral-vibration-right-threshold=2.5

# =========================================
# Distributed Tracing (Zipkin + Sleuth)
# =========================================
spring.sleuth.sampler.probability=1.0
spring.zipkin.base-url=http://zipkin:9411
spring.zipkin.enabled=true

# =========================================
# Metrics (Prometheus)
# =========================================
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.prometheus.access=unrestricted
management.endpoint.health.show-details=when-authorized
management.endpoint.health.roles=ADMIN

# Expose  custom sensor-data metrics (from  Kafka/WebFlux timers & counters)
management.metrics.enable.sensor.data.received=true
management.metrics.enable.sensor.data.processing=true

# =========================================
# WebSocket Configuration
# =========================================
#  custom prop (used in JwtRequestFilter, cors, etc.)
websocket.allowedOrigins=${cors.allowed-origins}

# =========================================
# JSON (ISO-8601 Dates)
# =========================================
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=true

# =========================================
# Banner Mode
# =========================================
spring.main.banner-mode=console

# =========================================
# Vault (Disabled)
# =========================================
spring.cloud.vault.enabled=false
